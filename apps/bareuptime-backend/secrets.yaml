# BareUptime Backend - Secrets Management
# This file contains Vault SecretStore and all ExternalSecrets for syncing secrets from Vault

---
# SecretStore - connects to Vault using Kubernetes auth
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: bareuptime-backend
spec:
  provider:
    vault:
      server: "http://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        # Use Kubernetes auth method
        kubernetes:
          mountPath: "kubernetes"
          role: "bareuptime-backend"
          serviceAccountRef:
            name: bareuptime-backend

---
# Database credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: bareuptime-backend
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
  data:
    - secretKey: DATABASE_URL
      remoteRef:
        key: bareuptime/database
        property: DATABASE_URL

---
# Redis credentials (Sentinel mode)
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: bareuptime-backend
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: redis-credentials
    creationPolicy: Owner
  dataFrom:
    - extract:
        key: shared/redis

---
# GitHub credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: github-credentials
  namespace: bareuptime-backend
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: github-credentials
    creationPolicy: Owner
  dataFrom:
    - extract:
        key: bareuptime/auth

---
# Application configuration
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-config
  namespace: bareuptime-backend
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: app-config
    creationPolicy: Owner
  dataFrom:
    - extract:
        key: bareuptime/config

---
# Google service account JSON
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: google-service-account
  namespace: bareuptime-backend
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: google-service-account
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        google-service-account.json: "{{ .serviceAccountJson | toString }}"
  dataFrom:
    - extract:
        key: bareuptime/google-service-account

---
# ClickHouse credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: clickhouse-credentials
  namespace: bareuptime-backend
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: clickhouse-credentials
    creationPolicy: Owner
  dataFrom:
    - extract:
        key: shared/clickhouse

---
# GHCR (GitHub Container Registry) credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ghcr-credentials
  namespace: bareuptime-backend
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: ghcr-credentials
    creationPolicy: Owner
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: |
          {
            "auths": {
              "ghcr.io": {
                "username": "{{ .username }}",
                "password": "{{ .password }}",
                "auth": "{{ printf "%s:%s" .username .password | b64enc }}"
              }
            }
          }
  data:
    - secretKey: username
      remoteRef:
        key: shared/ghcr
        property: username
    - secretKey: password
      remoteRef:
        key: shared/ghcr
        property: password
