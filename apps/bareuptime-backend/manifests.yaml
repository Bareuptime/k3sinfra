# BareUptime Backend - Kubernetes Deployment
# Uses Vault Secrets Webhook for secret injection (like Nomad templates)

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: bareuptime-backend
  labels:
    app: bareuptime-backend
    environment: production

---
# ServiceAccount for Vault authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bareuptime-backend
  namespace: bareuptime-backend
  labels:
    app: bareuptime-backend

---
# Persistent storage for application data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-storage
  namespace: bareuptime-backend
  labels:
    app: bareuptime-backend
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 1Gi

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: bareuptime-backend
  labels:
    app: bareuptime-backend
spec:
  type: ClusterIP
  selector:
    app: bareuptime-backend
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP

---
# GHCR credentials secret for pulling images
apiVersion: v1
kind: Secret
metadata:
  name: ghcr-credentials
  namespace: bareuptime-backend
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "ghcr.io": {
          "username": "vault:secret/data/shared/ghcr#username",
          "password": "vault:secret/data/shared/ghcr#password"
        }
      }
    }

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bareuptime-backend
  namespace: bareuptime-backend
  labels:
    app: bareuptime-backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: bareuptime-backend
  template:
    metadata:
      labels:
        app: bareuptime-backend
      annotations:
        # Vault Secrets Webhook configuration (like Nomad templates!)
        vault.security.banzaicloud.io/vault-addr: "http://vault.vault.svc.cluster.local:8200"
        vault.security.banzaicloud.io/vault-role: "bareuptime-backend"
        vault.security.banzaicloud.io/vault-skip-verify: "true"
        vault.security.banzaicloud.io/vault-path: "kubernetes"
    spec:
      serviceAccountName: bareuptime-backend
      imagePullSecrets:
        - name: ghcr-credentials

      # Init container to wait for database
      initContainers:
        - name: wait-for-database
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo 'Waiting for database...'
              until nc -z 10.10.85.1 5432; do
                echo 'Waiting for database connection...';
                sleep 2;
              done
              echo 'Database is ready'
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 50m
              memory: 32Mi

      containers:
        - name: backend
          image: ghcr.io/bareuptime/backend:latest
          imagePullPolicy: Always

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          # Environment variables with Vault injection (just like Nomad!)
          env:
            # Port configuration
            - name: PORT
              value: "8080"

            # Performance settings
            - name: GOMAXPROCS
              value: "2"
            - name: GOGC
              value: "100"
            - name: GOMEMLIMIT
              value: "450MiB"

            # Region
            - name: REGION
              value: "falkenstein"
            - name: REGION_TAG
              value: "region=falkenstein"

            # Logging
            - name: LOG_FORMAT
              value: "json"

            # ===== VAULT SECRETS =====
            # Database credentials
            - name: DATABASE_URL
              value: "vault:secret/data/bareuptime/database#DATABASE_URL"

            # Redis Sentinel configuration
            - name: REDIS_PASSWORD
              value: "vault:secret/data/shared/redis#REDIS_PASSWORD"
            - name: REDIS_MASTER_NAME
              value: "mymaster"
            - name: REDIS_SENTINELS
              value: "redis-sentinel.common.svc.cluster.local:26379"

            # GitHub credentials
            - name: GHC_TOKEN
              value: "vault:secret/data/bareuptime/auth#GHC_TOKEN"
            - name: GITHUB_USERNAME
              value: "vault:secret/data/bareuptime/auth#GITHUB_USERNAME"

            # Application configuration
            - name: APP_ENV
              value: "vault:secret/data/bareuptime/config#APP_ENV"
            - name: APP_NAME
              value: "vault:secret/data/bareuptime/config#APP_NAME"
            - name: LOG_LEVEL
              value: "vault:secret/data/bareuptime/config#LOG_LEVEL"
            - name: DEFAULT_LANG
              value: "vault:secret/data/bareuptime/config#DEFAULT_LANG"
            - name: OTP_EXPIRY_MINUTES
              value: "vault:secret/data/bareuptime/config#OTP_EXPIRY_MINUTES"
            - name: OTP_SECRET_KEY
              value: "vault:secret/data/bareuptime/config#OTP_SECRET_KEY"
            - name: EMAIL_FROM_ADDRESS
              value: "vault:secret/data/bareuptime/config#EMAIL_FROM_ADDRESS"
            - name: EMAIL_FROM_NAME
              value: "vault:secret/data/bareuptime/config#EMAIL_FROM_NAME"
            - name: EMAIL_REPLY_TO_ADDRESS
              value: "vault:secret/data/bareuptime/config#EMAIL_REPLY_TO_ADDRESS"
            - name: BREVO_API_KEY
              value: "vault:secret/data/bareuptime/config#BREVO_API_KEY"
            - name: RESEND_API_KEY
              value: "vault:secret/data/bareuptime/config#RESEND_API_KEY"
            - name: USE_BREVO
              value: "vault:secret/data/bareuptime/config#USE_BREVO"
            - name: FRESHDESK_API_TOKEN
              value: "vault:secret/data/bareuptime/config#FRESHDESK_API_TOKEN"
            - name: FRESHDESK_DOMAIN
              value: "vault:secret/data/bareuptime/config#FRESHDESK_DOMAIN"
            - name: STRIPE_WEBHOOK_SECRET
              value: "vault:secret/data/bareuptime/config#STRIPE_WEBHOOK_SECRET"
            - name: TELEGRAM_BOT_TOKEN
              value: "vault:secret/data/bareuptime/config#TELEGRAM_BOT_TOKEN"
            - name: VAPID_PRIVATE_KEY
              value: "vault:secret/data/bareuptime/config#VAPID_PRIVATE_KEY"
            - name: VAPID_PUBLIC_KEY
              value: "vault:secret/data/bareuptime/config#VAPID_PUBLIC_KEY"
            - name: VAPID_SUBJECT
              value: "vault:secret/data/bareuptime/config#VAPID_SUBJECT"
            - name: FCM_PROJECT_ID
              value: "vault:secret/data/bareuptime/config#FCM_PROJECT_ID"
            - name: CASHFREE_WEBHOOK_SECRET
              value: "vault:secret/data/bareuptime/config#CASHFREE_WEBHOOK_SECRET"

            # ClickHouse credentials
            - name: CLICKHOUSE_DATABASE
              value: "vault:secret/data/shared/clickhouse#CLICKHOUSE_DATABASE"
            - name: CLICKHOUSE_USERNAME
              value: "vault:secret/data/shared/clickhouse#CLICKHOUSE_USER"
            - name: CLICKHOUSE_PASSWORD
              value: "vault:secret/data/shared/clickhouse#CLICKHOUSE_PASSWORD"
            - name: CLICKHOUSE_URLS
              value: "10.10.85.1:9000,10.10.85.5:9000"

            # FCM credentials path (file will be injected by Vault)
            - name: FCM_CREDENTIALS_PATH
              value: "/secrets/google-service-account.json"

          # Volume mounts
          volumeMounts:
            # Persistent storage
            - name: backend-storage
              mountPath: /opt/bareuptime

            # Google service account JSON (from Vault)
            - name: google-service-account
              mountPath: /secrets
              readOnly: true

          # Health checks
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 10
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 3

          # Resource limits
          resources:
            requests:
              cpu: 150m
              memory: 365Mi
            limits:
              cpu: 500m
              memory: 512Mi

      # Volumes
      volumes:
        # Persistent storage
        - name: backend-storage
          persistentVolumeClaim:
            claimName: backend-storage

        # Google service account JSON from Vault
        - name: google-service-account
          secret:
            secretName: google-service-account-inline
            optional: true
            items:
              - key: google-service-account.json
                path: google-service-account.json

      # Anti-affinity to spread across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: bareuptime-backend
                topologyKey: kubernetes.io/hostname
