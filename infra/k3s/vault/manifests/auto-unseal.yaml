---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-unseal
  namespace: vault

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-unseal
  namespace: vault
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-unseal
  namespace: vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-unseal
subjects:
- kind: ServiceAccount
  name: vault-unseal
  namespace: vault

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-auto-unseal
  namespace: vault
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: vault-unseal
          restartPolicy: OnFailure
          containers:
          - name: unseal
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              set -e

              # Check if Vault pod exists
              VAULT_POD=$(kubectl get pod -n vault -l app.kubernetes.io/name=vault -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

              if [ -z "$VAULT_POD" ]; then
                echo "No Vault pod found"
                exit 0
              fi

              # Check Vault status
              SEALED=$(kubectl exec -n vault $VAULT_POD -- vault status -format=json 2>/dev/null | grep -o '"sealed":true' || echo "")

              if [ -z "$SEALED" ]; then
                echo "Vault is already unsealed"
                exit 0
              fi

              echo "Vault is sealed, attempting to unseal..."

              # Get unseal keys from secret
              if ! kubectl get secret vault-unseal-keys -n vault &>/dev/null; then
                echo "Unseal keys secret not found. Please initialize Vault first."
                exit 0
              fi

              # Unseal with 3 keys
              for i in 1 2 3; do
                KEY=$(kubectl get secret vault-unseal-keys -n vault -o jsonpath="{.data.unseal-key-$i}" | base64 -d)
                kubectl exec -n vault $VAULT_POD -- vault operator unseal "$KEY" || true
              done

              echo "Vault unsealed successfully"
